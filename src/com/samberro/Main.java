package com.samberro;

import com.samberro.matcher.MatchInfo;
import com.samberro.matcher.Matcher;

import java.io.*;

import static com.samberro.utils.Utils.*;

public class Main {

    public static void main(String[] args) throws IOException {
        byte[] bytes = fromByteStringsubstring(0, 4816));//fromFile(50);
        Matcher matcher = new Matcher();
        long startTime = System.currentTimeMillis();
        SuffixTrie suffixTrie = new SuffixTrie(matcher);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Coder packer = new Coder(new BufferedOutputStream(out));
        int lastWrite = -1;
        for (int i = 0; i < bytes.length; i++) {
            byte b = bytes[i];
            suffixTrie.insertByte(b, i);
            if (matcher.hasMatch()) {
                MatchInfo latestMatch = matcher.getMatch();
                packer.writeMatchedBytes(latestMatch, i);
                if (matcher.getState() == Matcher.State.IDLE) packer.writeUncompressedByte(b);
                lastWrite = i;
            } else if (matcher.getState() == Matcher.State.IDLE) {
                while (lastWrite < i) {
                    packer.writeUncompressedByte(bytes[++lastWrite]);
                }
            }
        }
        matcher.finish();
        if (matcher.hasMatch()) {
            MatchInfo latestMatch = matcher.getMatch();
            packer.writeMatchedBytes(latestMatch, bytes.length - latestMatch.getMatchLength());
        } else {
            while (lastWrite < bytes.length - 1) {
                packer.writeUncompressedByte(bytes[++lastWrite]);
            }
        }

        System.out.printf("Finished building tree in %d ms\n", System.currentTimeMillis() - startTime);
        System.out.println("COUNT: " + Node.COUNT + ", bytes: " + (humanReadableByteCountSI(bytes.length)));
        System.out.println("MATCHER: " + matcher);

        packer.close();
        byte[] compressed = out.toByteArray();
        String s = toByteString(compressed);
        System.out.printf("COMPRESSED (%d): %s\n", s.length() / 2, s);
        decode(bytes, compressed);
//        testTrie(bytes, suffixTrie);

    }

    private static void log(String format, Object... opts) {
        System.out.printf(format, opts).println();
    }


    static byte lastBoundary = 0;
//    private static int encodeBytes(byte[] bytes, int posInStream, Match m) {
//        int matchIndex = m == null ? -1 : m.getMatchIndex();
//        int encoded = 0;
//        byte[] a;
//        if(matchIndex == 0) {
//            OUTPUT.append("(1,")
//                    .append("-").append(m.getRelativePos())
//                    .append(",").append(m.getLength()).append(")");
//
//            int val = 1 << 22; // shift 22 bits to fit other fields
//            val |= (m.getRelativePos() & 0xFFFF) << 6; // shift 6 bits to fit size
//            val |= m.getLength() & 0x3F;
//
//            int shiftBy = (1 + ((8 - lastBoundary) % 8)) % 8;
//            val <<= shiftBy; //boundary align
//
//            byte[] byteVals = new byte[] {
//                    (byte) (val >> 24),
//                    (byte) (val >> 16),
//                    (byte) (val >> 8),
//                    (byte) (val)
//            };
//            if(shiftBy == 0) byteVals[1] = (byte) (byteVals[1] | COMPRESSED.pop());
//            else if(shiftBy > 1) {
//                byteVals[0] = (byte) (byteVals[0] | COMPRESSED.pop());
//                COMPRESSED.push(byteVals[0]);
//            }
//            COMPRESSED.push(byteVals[1]);
//            COMPRESSED.push(byteVals[2]);
//            COMPRESSED.push(byteVals[3]);
//
//            lastBoundary = (byte) ((7 + lastBoundary) % 8);
//
//            encoded += m.getLength();
//        } else {
//            int start = encodedLength - posInStream;
//            int end = bytes.length <= Compressor.MIN_MATCH - 1 ? bytes.length : bytes.length - Compressor.MIN_MATCH + 1;
//            for (int i = start; i < end && i != matchIndex; i++) {
//                if(i > matchIndex && matchIndex > 0) throw new RuntimeException("index > matchIndex");
//                OUTPUT.append("(0,'")
//                        .append(String.format("%02X", bytes[i]))
//                        .append("')");
//                a = new byte[]{
//                        (byte) ((byte) (bytes[i] >> (1 + lastBoundary)) & (0x7F >> lastBoundary)),
//                        (byte) (bytes[i] << (7 - lastBoundary))};
//
//                if(lastBoundary != 0) a[0] = (byte) (COMPRESSED.pop() | a[0]);
//
//                lastBoundary = (byte) ((1 + lastBoundary) % 8);
//                COMPRESSED.push(a[0]);
//                COMPRESSED.push(a[1]);
//                encoded++;
//            }
//        }
//        if(m != null) m.recycle();
//        return encoded;
//    }

    private static void decode(byte[] input, byte[] compressed) throws IOException {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        String string = new Decoder(compressed, new BufferedOutputStream(os)).withDebug(input).decode().getStringRepresentation();
        os.close();
        byte[] uncompressed = os.toByteArray();
        System.out.printf("Required %s bytes to compress %s\n", humanReadableByteCountSI(compressed.length), humanReadableByteCountSI(input.length));
        String inputStr = toByteString(input);
        System.out.println("INPUT:        " + inputStr);
        System.out.println("COMPRESSED  : " + string);
        String s = toByteString(uncompressed);
        System.out.println("UNCOMPRESSED: " + s);
        if (!s.equals(inputStr)) throw new RuntimeException("Not equal");
    }
}
